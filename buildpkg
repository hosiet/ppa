#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# buildpkg - Build debian package with debian dir and get-orig-source target
#
# 2016, Boyuan Yang <073plan@gmail.com>
#
# To the extent possible under law, Boyuan Yang has waived all copyright and
# related or neighboring rights to buildpkg.
# This work is published from: China Mainland.

"""
Build Debian packages, selectively or fully.
"""

__license__ = 'CC0'
__docformat__ = 'reStructuredText'
__version__ = '0.0.1'

import logging

BUILDDIRNAME = 'build'
DEB_PACKAGE_LIST = [
        'shadowsocks-libev',
        'eric',
        'systemd-binfmt-wine',
        'libmdcpp',
        'marketo',
        'nixnote2',
        'telegram-desktop-bin',
        'tldr',
        ];
PREPARE_DPKG_SOURCE = 'rm -rf ./{builddirname}; dpkg-source -b ./{dirname}; dpkg-source -x ./{dscfilename} "./{builddirname}";'
SIGNING_GPG_KEY = '3B244E51'
BUILD_DIR = 'debuild'
# XXX: bad shell usage

# Simple logger
logger = logging.getLogger('buildpkg')
logger_console_handler = logging.StreamHandler()
logger_formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s')

def pkg_process(
        pkglist: list,
        builddir: str,
        buildtype: str,
        verbose=True,
        prepare_only=False
        ):
    """Initialize all the building process.

    Work still in progress.

    The process is as follows:

        1. chdir into builddir.
        2. trigger pkgname/debian/rules get-orig-source.
            The original tarball is thus downloaded and placed in builddir.
        3. chdir into pkgname dir.
        4. execute debuild and finish the build process.
        5. return to phase 1 and finish another package.

    :param pkglist: The list of packages to process.
    :type pkglist: list.
    :param builddir: The working directory while building.
    :type builddir: str.
    :param verbose: Indicate whether to print debuild output to stdout.
    :type verbose: bool.
    """

    def PREPARE(dirname: str):
        """Finish prepare stage before debuild.

        Calling dpkg-source here.
        """
        return PREPARE_DPKG_SOURCE.format(
                dirname=dirname,
                builddirname=BUILDDIRNAME,
                dscfilename='{}-*.dsc'.format(dirname[::-1].replace('-', '_', 1)[::-1])
                )

    logger.info('final pkglist is {}.'.format(pkglist))
    import os
    import sys
    _oldcwd = os.getcwd()
    os.chdir(builddir)
    try:
        _cwd = os.getcwd()
        dirlist = os.listdir('.')
        for i in pkglist:
            target_dirlist = [ x for x in dirlist if x.startswith(i) and x[:].strip(i+'-')[0].isnumeric() ]
            if len(target_dirlist) >= 2:
                # XXX: Name may be ambiguous, but ignored here
                pass
            elif len(target_dirlist) <= 0:
                raise Exception('specified package not found')
            for j in target_dirlist:
                # XXX: using os.system(), needs a better non-blocking solution
                os.system('{}/debian/rules get-orig-source'.format(j))
                ####os.chdir(j)
                # Extract original tarball
                # TODO: Unify PREPARE() stage as shadowsocks-libev
                os.system(PREPARE(j))
                try:
                    if prepare_only:
                        pass
                    elif buildtype == 'DEBUILD':
                        # XXX: using os.system(), needs a better non-blocking solution
                        # TODO: Deal with gpg key problem
                        os.chdir(BUILDDIRNAME)
                        os.system('debuild -tc -i -k{}'.format(SIGNING_GPG_KEY))
                    elif buildtype == 'COWBUILDER':
                        # TODO: cowbuilder needs root privilege, which still needs
                        #       to be implemented.
                        logger.error('COWBUILDER SUPPORT NOT IMPLEMENTED YET')
                        raise NotImplementedError(
                                'ERR_COWBUILDER_NOT_IMPLEMENTED')
                    else:
                        raise NotImplementedError(
                                'ERR_BUILDTYPE_NOT_RECOGNIZED:{}'.format(
                                    buildtype)
                                )
                finally:
                    os.chdir(_cwd)
    finally:
        os.chdir(_oldcwd)

    pass

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(
            description="deb package builder",
            epilog="Use with caution.")
    parser.add_argument(
            '-V', '--version',
            help='show utility version',
            action='version',
            version='{}'.format(__version__))
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
            '-v', '--verbose',
            help='show debuild output and debug info',
            action='store_true',
            )
    group.add_argument(
            '-q', '--quiet',
            help='do not show debuild output and debug info',
            action='store_false',
            )
    parser.add_argument(
            '-l', '--list',
            help='only build packages in the list',
            action='store_true',
            default=False)
    parser.add_argument(
            '-p', '--prepare',
            help='only prepare .dsc files, do not invoke debuild',
            action='store_true',
            default=False,
            )
    parser.add_argument(
            '-t', '--type',
            help='specify build type, "DEBUILD"/"COWBUILDER"',
            action='store',
            default='DEBUILD',
            )
    parser.add_argument(
            '-d', '--builddir',
            help='working directory while building',
            default=BUILD_DIR)
    parser.add_argument(
            'pkglist',
            nargs=argparse.REMAINDER,
            help='packages to be built')
    args = parser.parse_args()
    if args.verbose:
        logger.setLevel(logging.DEBUG)
        logger_console_handler.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
        logger_console_handler.setLevel(logging.INFO)
    build_type = args.type.upper() if args.type and isinstance(args.type, str) else 'DEBUILD'
    logger_console_handler.setFormatter(logger_formatter)
    logger.addHandler(logger_console_handler)
    logger.debug('Received arguments: {}.'.format(repr(args)))
    pkg_process(
            pkglist = [ x for x in (DEB_PACKAGE_LIST if args.list else args.pkglist) if not x.startswith('-')],
            builddir = args.builddir,
            buildtype = build_type,
            verbose = args.verbose,
            prepare_only = args.prepare,
            )
